services:
  api-gateway:
    container_name: api-gateway-service
    image: api-gateway-service:dev
    env_file: # Все переменные из этих файлов добавляются в окружение контейнера
      - .env
    build:
      context: ./
      dockerfile: ./docker/spring-boot/Dockerfile
      args:
        PROJECT: api-gateway
    environment:
      SPRING_CONFIG_LOCATION: /config/application.yml
    volumes:
      - ./api-gateway/src/main/resources/application.yml:/config/application.yml
      - ./api-gateway:/ths-electro/api-gateway
      - api-gateway-maven-data:/root/.m2/repository
    expose:
      - $API_GATEWAY_PORT
    networks:
      - dev
  image-service:
    container_name: image-service
    image: image-service:dev
    env_file: # Все переменные из этих файлов добавляются в окружение контейнера
      - .env
    build:
      context: ./
      dockerfile: ./docker/spring-boot/Dockerfile
      args:
        PROJECT: image-service
    environment:
      SPRING_CONFIG_LOCATION: /config/application.yml
    volumes:
      - ./image-service/src/main/resources/application.yml:/config/application.yml
      - ./image-service:/ths-electro/image-service
      - image-service-maven-data:/root/.m2/repository
    depends_on:
      - minio
      - miniomc
    expose:
      - $IMAGE_SERVICE_PORT
    networks:
      - dev
  minio:
    container_name: minio
    image: bitnami/minio:2025.3.12
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: http://minio.envelope42.ru
      MINIO_BROWSER_REDIRECT_URL: http://minio.envelope42.ru/ui
    volumes:
      - minio-storage:/data
    expose:
      - $MINIO_PORT
      - $MINIO_UI_PORT
    networks:
      dev:
        aliases:
          - host.docker.internal
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MINIO_PORT}/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 10
  miniomc:
    container_name: miniomc
    image: minio/mc:latest
    env_file: .env
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:$${MINIO_PORT} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      mc mb myminio/avatars-bucket || true;
      echo 'MinIO initialization complete';
      "
    networks:
      - dev
  identity-service-db:
    container_name: identity-service-db
    image: postgres:17.2
    environment:
      POSTGRES_DB: $IDENTITY_SERVICE_DB_NAME
      POSTGRES_USER: $DEFAULT_DB_USERNAME
      POSTGRES_PASSWORD: $DEFAULT_DB_PASSWORD
      PGDATA: /var/lib/postgresql/data
    expose:
      - "5432"
    restart: unless-stopped
    networks:
      - dev
  identity-service:
    container_name: identity-service
    image: identity-service:dev
    env_file: # Все переменные из этих файлов добавляются в окружение контейнера
      - .env
      - ./identity-service/.env
    build:
      context: ./
      dockerfile: ./docker/spring-boot/Dockerfile
      args:
        PROJECT: identity-service
    environment:
      SPRING_CONFIG_LOCATION: /config/application.yml
    volumes:
      - ./identity-service/src/main/resources/application.yml:/config/application.yml
      - ./identity-service:/ths-electro/identity-service
      - identity-service-maven-data:/root/.m2/repository
    depends_on:
      - identity-service-db
    expose:
      - $IDENTITY_SERVICE_PORT
    networks:
      - dev
  helper-service-db:
    container_name: helper-service-db
    image: postgres:17.2
    environment:
      POSTGRES_DB: helper_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      PGDATA: /var/lib/postgresql/data
    expose:
      - "5432"
    restart: unless-stopped
    networks:
      - dev
  helper-service:
    container_name: helper-service
    image: helper-service:dev
    env_file: # Все переменные из этих файлов добавляются в окружение контейнера
      - .env
      - ./helper-service/.env
    build:
      context: ./
      dockerfile: ./docker/spring-boot/Dockerfile
      args:
        PROJECT: helper-service
    environment:
      SPRING_CONFIG_LOCATION: /config/application.yml
    volumes:
      - ./helper-service/src/main/resources/application.yml:/config/application.yml
      - ./helper-service:/ths-electro/helper-service
      - helper-service-maven-data:/root/.m2/repository
    depends_on:
      - helper-service-db
    expose:
      - $HELPER_SERVICE_PORT
    networks:
      - dev
  telegram-bot:
    container_name: telegram-bot
    image: telegram-bot:dev
    build:
      context: .
      dockerfile: ./docker/telegram/Dockerfile
    env_file:
      - ./telegram/.env
    volumes:
      - ./telegram:/app
#    restart: always
  react-app-build:
    container_name: react-app-remote-build
    image: react-app-remote-build:dev
    build:
      context: .
      dockerfile: ./docker/react/remote/Dockerfile
    volumes:
      - npm-storage-build:/app/build
  react-app:
    container_name: react-app
    image: react-app:dev
    build:
      context: .
      dockerfile: ./docker/react/remote/nginx/Dockerfile
      args:
        port: $REACT_APP_PORT
    volumes:
      - npm-storage-build:/usr/shage/nginx/html
      - ./docker/react/remote/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - react-app-build
    expose:
      - $REACT_APP_PORT
    networks:
      - dev
  nginx:
    container_name: nginx-testing
    image: nginx:1.27.4-alpine
    env_file:
      - .env
    ports:
      - "80:80"
      - "5999:5999"
    volumes:
      - ./nginx-templates/prod.conf.template:/etc/nginx/templates/default.conf.template
      - ./nginx.conf:/etc/nginx/nginx.conf
      - .htpasswd:/etc/nginx/.htpasswd
    environment:
      - DOMAIN=envelope42.ru
    networks:
      - dev
  # Grafana stack
  loki:
    container_name: metrics-loki
    image: grafana/loki:main
    command: [ '-config.file=/etc/loki/local-config.yaml' ]
    expose:
      - $LOKI_PORT
    networks:
      - dev
  grafana:
    container_name: metrics-grafana
    image: grafana/grafana:10.1.0
    volumes:
      - ./docker/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./docker/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=$GRAFANA_USERNAME
      - GF_SECURITY_ADMIN_PASSWORD=$GRAFANA_PASSWORD
      - GF_SERVER_HTTP_PORT=$GRAFANA_PORT
      - GF_SERVER_ROOT_URL=http://grafana.envelope42.ru
      - GF_SERVER_DOMAIN=grafana.envelope42.ru
      - GF_SERVER_FROM_SUB_PATH=false
    expose:
      - $GRAFANA_PORT
    networks:
      - dev
volumes:
  # Minio
  minio-storage:
  # React
  npm-storage-build:
  # Maven
  image-service-maven-data:
  identity-service-maven-data:
  api-gateway-maven-data:
  helper-service-maven-data:
  # Postgresql
  identity-service-db-data:
networks:
  dev:
