from dotenv import load_dotenv
import os

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    ConversationHandler,
    filters
)
import asyncio
import aiohttp
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_ID = 996188029
active_dialogs = set()  
work_started = False
notification_task = None
secret_key = None
WAITING_FOR_SECONDS = 1
COMMANDS = ["–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", "–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"]
BACKEND_URL = "http://helper-service:8082/api/helper/chat"

async def verify_key(key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á –Ω–∞ –±–µ–∫–µ–Ω–¥–µ"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/key",
                params={'key': key}
            ) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞: {e}")
        return False

async def get_queue_size() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å –±–µ–∫–µ–Ω–¥–∞"""
    global secret_key
    if not secret_key:
        return 0

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{BACKEND_URL}/queue",
                params={'tgId': ADMIN_ID, 'key': secret_key},
                timeout=5
            ) as response:
                if response.status == 200:
                    return int(await response.text())
                return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")
        return 0

async def get_next_dialog() -> str | None:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    global secret_key
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/link",
                params={'tgId': ADMIN_ID, 'key': secret_key},
                timeout=5
            ) as response:
                if response.status == 200:
                    return await response.text()
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        return None

async def send_to_user(message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–µ–∫–µ–Ω–¥"""
    global secret_key
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/message",
                params={
                    'tgId': ADMIN_ID,
                    'key': secret_key
                },
                json={
                    'msg': message
                }
            ) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    
async def get_messages_by_time(seconds: int) -> list[str] | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    global secret_key
    if not secret_key:
        return None

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{BACKEND_URL}",  
                params={
                    'tgId': ADMIN_ID,
                    'key': secret_key
                },
                json={
                    'duration': seconds
                },
                timeout=5
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if isinstance(data, list) and all(isinstance(item, str) for item in data):
                        return data
                    logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return None

async def close_dialog() -> bool:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    global secret_key
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/close",
                params={'tgId': ADMIN_ID, 'key': secret_key},
                timeout=5
            ) as response:
                if response.status == 200:
                    return True
                elif response.status == 400:
                    logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥")
                    return False
                return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        return False

async def notify_admin(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    global work_started
    while work_started:
        if ADMIN_ID not in active_dialogs:
            queue_size = await get_queue_size()
            if queue_size > 0:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üîî –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {queue_size}",
                    reply_markup=await get_admin_keyboard()
                )
        await asyncio.sleep(60)

async def get_admin_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not work_started:
        return ReplyKeyboardMarkup([[KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")]], resize_keyboard=True)
    
    if ADMIN_ID in active_dialogs:
        return ReplyKeyboardMarkup([[KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup(
            [
                [KeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥")],
                [KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")],
                [KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
            ],
            resize_keyboard=True
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global secret_key
    if update.effective_user.id == ADMIN_ID:
        if secret_key is None:
            await update.message.reply_text(
                "üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞:",
                reply_markup=await get_admin_keyboard()
            )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.",
            reply_markup=ReplyKeyboardRemove()
        )

async def handle_seconds_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return ConversationHandler.END
    
    try:
        seconds = int(update.message.text)
        if seconds <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return WAITING_FOR_SECONDS
    
    messages = await get_messages_by_time(seconds)
    
    if messages:
        response = f"üì® –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {seconds} —Å–µ–∫—É–Ω–¥:\n\n" + "\n\n".join(messages)
        for i in range(0, len(response), 4096):
            await update.message.reply_text(response[i:i+4096])
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {seconds} —Å–µ–∫—É–Ω–¥")
    
    await update.message.reply_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=await get_admin_keyboard()
    )
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global work_started, notification_task, secret_key
    user_id = update.effective_user.id
    text = update.message.text

    if user_id == ADMIN_ID:
        if secret_key is None:
            if await verify_key(text.strip()):
                secret_key = text.strip()
                await update.message.reply_text(
                    "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω",
                    reply_markup=await get_admin_keyboard()
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
            return ConversationHandler.END

        if text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É":
            work_started = True
            count = await get_queue_size()
            notification_task = asyncio.create_task(notify_admin(context))
            await update.message.reply_text(
                f"‚ÑπÔ∏è –û–∂–∏–¥–∞—é—Ç: {count}\n–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞",
                reply_markup=await get_admin_keyboard()
            )
            return ConversationHandler.END

        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É":
            work_started = False
            if ADMIN_ID in active_dialogs:
                await close_dialog()
                active_dialogs.remove(ADMIN_ID)
            if notification_task:
                notification_task.cancel()
            await update.message.reply_text(
                "‚ùå –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                reply_markup=await get_admin_keyboard()
            )
            return ConversationHandler.END

        elif text == "–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥":
            if not work_started:
                await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É!")
                return ConversationHandler.END
                
            if ADMIN_ID in active_dialogs:
                await update.message.reply_text("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥!")
                return ConversationHandler.END
                
            user_msg = await get_next_dialog()
            if user_msg:
                active_dialogs.add(ADMIN_ID)
                await update.message.reply_text(
                    f"üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥:\n{user_msg}",
                    reply_markup=await get_admin_keyboard()
                )
            else:
                await update.message.reply_text(
                    "‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                    reply_markup=await get_admin_keyboard()
                )
            return ConversationHandler.END
        
        elif text == "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è":
            if not work_started:
                await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É!")
                return ConversationHandler.END
                
            await update.message.reply_text(
                "‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:",
                reply_markup=ReplyKeyboardRemove()
            )
            return WAITING_FOR_SECONDS

        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            if ADMIN_ID in active_dialogs:
                success = await close_dialog()
                if success:
                    active_dialogs.remove(ADMIN_ID)
                    await update.message.reply_text(
                        "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω",
                        reply_markup=await get_admin_keyboard()
                    )
                else:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                        reply_markup=await get_admin_keyboard()
                    )
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
                    reply_markup=await get_admin_keyboard()
                )
            return ConversationHandler.END

        elif ADMIN_ID in active_dialogs and text not in COMMANDS:
            if await send_to_user(text):
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return ConversationHandler.END

    else:
        if work_started:
            if ADMIN_ID in active_dialogs:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{text}"
                )
            else:
                await update.message.reply_text("‚åõ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        else:
            await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return ConversationHandler.END

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_SECONDS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_seconds_input)
            ],
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()