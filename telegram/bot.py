from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from collections import deque
import asyncio
import aiohttp

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

GET_SERVER_KEY = 1

ADMIN_ID = 996188029
active_dialogs = {}
waiting_queue = deque()
work_started = False
notification_task = None
# server_key = "g6s75rjhWc6cWxsYf7KSPdl0rO6Rc0RQ"
server_key = None

COMMANDS = ["–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", "–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]

async def notify_admin(context: ContextTypes.DEFAULT_TYPE):
    global notification_task
    while work_started:
        if waiting_queue and ADMIN_ID not in active_dialogs:
            count = len(waiting_queue)
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üîî –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ –æ—á–µ—Ä–µ–¥–∏! –í—Å–µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç: {count}",
                reply_markup=await get_admin_keyboard()
            )
        await asyncio.sleep(60)

async def get_admin_keyboard():
    if work_started:
        if ADMIN_ID in active_dialogs:
            return ReplyKeyboardMarkup(
                [[KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                resize_keyboard=True
            )
        else:
            return ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥")],
                    [KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
                ],
                resize_keyboard=True
            )
    else:
        return ReplyKeyboardMarkup(
            [[KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")]],
            resize_keyboard=True
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global server_key

    if update.effective_user.id == ADMIN_ID:
        if server_key is None:
            await update.message.reply_text(
                "üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É:",
                reply_markup=ReplyKeyboardRemove()
            )
            return GET_SERVER_KEY
        else:
            await update.message.reply_text(
                "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:",
                reply_markup=await get_admin_keyboard()
            )
            return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def get_server_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global server_key

    # –ü–æ–ª—É—á–µ–Ω–∏–µ secretKey –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    server_key = update.message.text.strip()

    async with aiohttp.ClientSession() as session:
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ http://helper-service:8082/api/helper/chat/se")
            logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: tgId={ADMIN_ID}, secretKey={server_key}")

            async with session.post(
                'http://helper-service:8082/api/helper/chat/se',
                params={
                    'tgId': str(ADMIN_ID),
                    'secretKey': server_key
                }
            ) as response:
                if response.status == 200:
                    data = await response.json()

                    # –ï—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    await update.message.reply_text(
                        "‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:",
                        reply_markup=await get_admin_keyboard()
                    )

                    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
                    queue_size = await get_queue_size()
                    if queue_size is not None:
                        await update.message.reply_text(
                            f"‚Ñπ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {queue_size}"
                        )

                    return ConversationHandler.END
                else:
                    server_key = None
                    error_message = await response.text()
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –°—Ç–∞—Ç—É—Å: {response.status}, –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")

                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:"
                    )
                    return GET_SERVER_KEY
        except Exception as e:
            server_key = None
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")

            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return GET_SERVER_KEY

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=await get_admin_keyboard()
    )
    return ConversationHandler.END

async def get_queue_size():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è server_key
    if not server_key:
        logger.error("Server key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        return None

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ aiohttp
    async with aiohttp.ClientSession() as session:
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ http://helper-service:8082/api/helper/chat/queue")
            logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: tgId={ADMIN_ID}, secretKey={server_key}")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            async with session.post(
                'http://helper-service:8082/api/helper/chat/queue',
                params={
                    'tgId': str(ADMIN_ID),
                    'secretKey': server_key
                }
            ) as response:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –°—Ç–∞—Ç—É—Å: {response.status}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                if response.status == 200:
                    data = await response.json()
                    logger.debug(f"–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {data}")

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
                    queue_size = data.get('queue_size', 0)
                    logger.info(f"–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {queue_size}")
                    return queue_size
                else:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                    error_message = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ. –°—Ç–∞—Ç—É—Å: {response.status}, –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                    return None
        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global work_started, notification_task

    if update.effective_user.id == ADMIN_ID:
        text = update.message.text

        if text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É":
            work_started = True
            queue_size = await get_queue_size()
            count = queue_size if queue_size is not None else len(waiting_queue)

            notification_task = asyncio.create_task(notify_admin(context))
            await update.message.reply_text(
                f"‚Ñπ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥' –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.",
                reply_markup=await get_admin_keyboard()
            )

        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É":
            work_started = False
            if ADMIN_ID in active_dialogs:
                user_id, chat_id = active_dialogs.pop(ADMIN_ID)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω."
                )
            if notification_task:
                notification_task.cancel()
            await update.message.reply_text(
                "‚ùå –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
                reply_markup=await get_admin_keyboard()
            )

        elif text == "–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥":
            if not work_started:
                await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É!", reply_markup=await get_admin_keyboard())
                return

            if ADMIN_ID in active_dialogs:
                await update.message.reply_text(
                    "‚ö† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.",
                    reply_markup=await get_admin_keyboard()
                )
            else:
                if waiting_queue:
                    user_id, chat_id, first_message, first_message_id = waiting_queue.popleft()
                    active_dialogs[ADMIN_ID] = (user_id, chat_id)

                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É. –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è."
                    )

                    await update.message.reply_text(
                        f"üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {user_id}\n"
                        f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{first_message}\n\n"
                        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥' –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.",
                        reply_markup=await get_admin_keyboard()
                    )
                else:
                    await update.message.reply_text(
                        "‚Ñπ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤.",
                        reply_markup=await get_admin_keyboard()
                    )

        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            if ADMIN_ID not in active_dialogs:
                await update.message.reply_text(
                    "‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                    reply_markup=await get_admin_keyboard()
                )
            else:
                user_id, chat_id = active_dialogs.pop(ADMIN_ID)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
                )
                await update.message.reply_text(
                    "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                    reply_markup=await get_admin_keyboard()
                )

        elif ADMIN_ID in active_dialogs and text not in COMMANDS:
            user_id, chat_id = active_dialogs[ADMIN_ID]
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {update.message.text}"
                )
            except Exception as e:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}",
                    reply_markup=await get_admin_keyboard()
                )

    else:
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id

        if work_started:
            if ADMIN_ID in active_dialogs:
                active_user_id, _ = active_dialogs[ADMIN_ID]
                if user_id == active_user_id:
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:\n\n{update.message.text}"
                    )
                else:
                    await update.message.reply_text(
                        "‚è≥ –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–∏–∞–ª–æ–≥–æ–º. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∂–µ.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    if not any(q[0] == user_id for q in waiting_queue):
                        waiting_queue.append((
                            user_id,
                            chat_id,
                            update.message.text,
                            update.message.message_id
                        ))
            else:
                if not any(q[0] == user_id for q in waiting_queue):
                    waiting_queue.append((
                        user_id,
                        chat_id,
                        update.message.text,
                        update.message.message_id
                    ))
                    if work_started:
                        try:
                            await context.bot.send_message(
                                chat_id=ADMIN_ID,
                                text=f"üîî –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}! –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(waiting_queue)}",
                                reply_markup=await get_admin_keyboard()
                            )
                        except:
                            pass

                await update.message.reply_text(
                    "‚úî –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
        else:
            await update.message.reply_text(
                "‚ùå –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )

def main():
    application = Application.builder() \
        .token("8170772601:AAGitKaxTm_LVKE4BtaqmsU4iR9RFtzZCYM") \
        .build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_SERVER_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_server_key)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handlers([
        conv_handler,
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    ])

    application.run_polling()

if __name__ == "__main__":
    main()