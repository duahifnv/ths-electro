from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from collections import deque
import asyncio
import aiohttp
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ADMIN_ID = 996188029
active_dialogs = {}
waiting_queue = deque()
work_started = False
notification_task = None
secret_key = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
COMMANDS = ["–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", "–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]
BACKEND_URL = "http://helper-service:8082/api/helper/chat"

async def verify_key(key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á –Ω–∞ –±–µ–∫–µ–Ω–¥–µ"""
    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–∞...")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: key={key}")

        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/key",
                params={
                    'key': key,
                }
            ) as response:
                if response.status == 200:
                    logger.info(f"–ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω")
                    return True
                if response.status == 401:
                    logger.info(f"–ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                    return False
                else:
                    error_message = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞. –°—Ç–∞—Ç—É—Å: {response.status}, –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞: {e}")
        return False


async def get_queue_size() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å –±–µ–∫–µ–Ω–¥–∞"""
    global secret_key
    if not secret_key:
        logger.warning("Secret key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
        return 0

    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏...")
        logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: Authorization=Bearer {secret_key}")

        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{BACKEND_URL}/queue",
                headers={"Authorization": f"Bearer {secret_key}"},
                timeout=5
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    queue_size = data.get("size", 0)
                    logger.info(f"–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω: {queue_size}")
                    return queue_size
                else:
                    error_message = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏. –°—Ç–∞—Ç—É—Å: {response.status}, –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                    return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
        return 0


async def notify_admin(context: ContextTypes.DEFAULT_TYPE):
    global notification_task
    while work_started:
        if waiting_queue and ADMIN_ID not in active_dialogs:
            count = len(waiting_queue)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö. –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {count}")

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üîî –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ –æ—á–µ—Ä–µ–¥–∏! –í—Å–µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç: {count}",
                reply_markup=await get_admin_keyboard()
            )
        await asyncio.sleep(60)


async def get_admin_keyboard():
    if work_started:
        if ADMIN_ID in active_dialogs:
            return ReplyKeyboardMarkup(
                [[KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                resize_keyboard=True
            )
        else:
            return ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥")],
                    [KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
                ],
                resize_keyboard=True
            )
    else:
        return ReplyKeyboardMarkup(
            [[KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")]],
            resize_keyboard=True
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global secret_key
    if update.effective_user.id == ADMIN_ID:
        if secret_key is None:
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.")
            await update.message.reply_text(
                "üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            await update.message.reply_text(
                "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:",
                reply_markup=await get_admin_keyboard()
            )
    else:
        logger.info(f"–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {update.effective_user.id}) –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ.")
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
            reply_markup=ReplyKeyboardRemove()
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global work_started, notification_task, secret_key
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text

    if user_id == ADMIN_ID:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        if secret_key is None:
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤—ë–ª —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.")
            key = text.strip()
            is_valid = await verify_key(key)
            if is_valid:
                secret_key = key
                logger.info("–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
                await update.message.reply_text(
                    "‚úÖ –ö–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω.",
                    reply_markup=await get_admin_keyboard()
                )
            else:
                logger.error("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.")
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É":
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.")
            work_started = True
            count = await get_queue_size()  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å –±–µ–∫–µ–Ω–¥–∞
            notification_task = asyncio.create_task(notify_admin(context))
            await update.message.reply_text(
                f"‚ÑπÔ∏è –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥' –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.",
                reply_markup=await get_admin_keyboard()
            )
        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É":
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
            work_started = False
            if ADMIN_ID in active_dialogs:
                user_id, chat_id = active_dialogs.pop(ADMIN_ID)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω."
                )
            if notification_task:
                notification_task.cancel()
            await update.message.reply_text(
                "‚ùå –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
                reply_markup=await get_admin_keyboard()
            )
        elif text == "–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥":
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥.")
            if not work_started:
                logger.warning("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ó–∞–ø—Ä–æ—Å '–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥' –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
                await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É!", reply_markup=await get_admin_keyboard())
                return
            if ADMIN_ID in active_dialogs:
                logger.warning("–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥.")
                await update.message.reply_text(
                    "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.",
                    reply_markup=await get_admin_keyboard()
                )
            else:
                queue_size = await get_queue_size()
                if queue_size > 0:
                    if waiting_queue:
                        logger.info("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                        user_id, chat_id, first_message, first_message_id = waiting_queue.popleft()
                        active_dialogs[ADMIN_ID] = (user_id, chat_id)
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É. –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è."
                        )
                        await update.message.reply_text(
                            f"üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {user_id}\n"
                            f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{first_message}\n"
                            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥' –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.",
                            reply_markup=await get_admin_keyboard()
                        )
                else:
                    logger.info("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤.")
                    await update.message.reply_text(
                        "‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤.",
                        reply_markup=await get_admin_keyboard()
                    )
        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥.")
            if ADMIN_ID not in active_dialogs:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                    reply_markup=await get_admin_keyboard()
                )
            else:
                user_id, chat_id = active_dialogs.pop(ADMIN_ID)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
                )
                await update.message.reply_text(
                    "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                    reply_markup=await get_admin_keyboard()
                )
        elif ADMIN_ID in active_dialogs and text not in COMMANDS:
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            user_id, chat_id = active_dialogs[ADMIN_ID]
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {update.message.text}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}",
                    reply_markup=await get_admin_keyboard()
                )
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        if work_started:
            if ADMIN_ID in active_dialogs:
                active_user_id, _ = active_dialogs[ADMIN_ID]
                if user_id == active_user_id:
                    logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id}:\n{update.message.text}"
                    )
                else:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
                    await update.message.reply_text(
                        "‚è≥ –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–∏–∞–ª–æ–≥–æ–º. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∂–µ.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    if not any(q[0] == user_id for q in waiting_queue):
                        waiting_queue.append((
                            user_id,
                            chat_id,
                            update.message.text,
                            update.message.message_id
                        ))
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
                if not any(q[0] == user_id for q in waiting_queue):
                    waiting_queue.append((
                        user_id,
                        chat_id,
                        update.message.text,
                        update.message.message_id
                    ))
                    if work_started:
                        try:
                            await context.bot.send_message(
                                chat_id=ADMIN_ID,
                                text=f"üîî –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}! –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(waiting_queue)}",
                                reply_markup=await get_admin_keyboard()
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                await update.message.reply_text(
                    "‚úîÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞.")
            await update.message.reply_text(
                "‚ùå –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )


def main():
    application = Application.builder() \
        .token("8170772601:AAGitKaxTm_LVKE4BtaqmsU4iR9RFtzZCYM") \
        .build()

    application.add_handlers([
        CommandHandler("start", start),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    ])

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()


if __name__ == "__main__":
    main()