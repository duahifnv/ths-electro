import os
import logging
import requests
from requests import Response

import wsmanager
import json

from sender import AsyncMessageSender
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
AUTH_URL = os.getenv("AUTH_URL")
USER_ROLES_URL = os.getenv("USER_ROLES_URL")
WEBSOCKET_URL = os.getenv("WEBSOCKET_URL")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
LOGIN, PASSWORD = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_KEYBOARD = [["–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"]]
AFTER_AUTH_KEYBOARD = [["–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"], ["–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"]]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è id –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ç–æ–ø–∏–∫–∏ –∏ –æ—á–µ—Ä–µ–¥–∏
ERROR_QUEUE_SUB_ID = "sub-1"
DIALOGS_TOPIC_SUB_ID = "sub-2"
DIALOGS_QUEUE_SUB_ID = "sub-3"
PRIVATE_CHAT_SUB_ID = "sub-4"
DIALOG_END_QUEUE_SUB_ID = "sub-5"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application = None
ws_manager: wsmanager.WebSocketManager = None
ws_connection = None
ws_thread = None
users_usernames = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —á–∏—Å–ª–∞ –∂–¥—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
waiting_count = 0
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
is_dialog_open = False

sender = AsyncMessageSender()

def message_all(message):
    for user_id, _ in users_usernames.items():
        sender.send(application.bot, user_id, message)

def message_send(receiver, message):
    user_id = next((k for k, v in users_usernames.items() if v == receiver), None)
    if not user_id:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {receiver}")
        return
    sender.send(application.bot, user_id, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.",
        reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True),
    )

# –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def authorize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ <b>–ª–æ–≥–∏–Ω</b>:",
                                    parse_mode="HTML")
    return LOGIN

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
async def get_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b>:",
                                    parse_mode="HTML")
    return PASSWORD

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫—ç–Ω–¥
async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global users_usernames
    password = update.message.text
    username = context.user_data.get("username")

    try:
        auth_response = requests.post(
            AUTH_URL,
            json={"username": username, "password": password}
        )
        if auth_response.status_code == 200:
            jwt_token = auth_response.json().get("token")
            roles_response = requests.get(
                USER_ROLES_URL,
                headers={"Authorization": f"Bearer {jwt_token}"}
            )
            if not has_helper_role(roles_response):
                await update.message.reply_text(
                    "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É.",
                    reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True),
                )
                return ConversationHandler.END
            if username in users_usernames.values():
                await update.message.reply_text(
                    "‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True),
                )
                return ConversationHandler.END
            user_id = update.effective_user.id
            users_usernames[user_id] = username
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            global ws_manager
            ws_manager = initialize_ws_manager(username, jwt_token)
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
            if ws_manager.connect():
                await update.message.reply_text(
                    "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
                    reply_markup=ReplyKeyboardMarkup(AFTER_AUTH_KEYBOARD, resize_keyboard=True),
                )
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True),
                )
            return ConversationHandler.END

        elif auth_response.status_code == 400 or auth_response.status_code == 401:
            await update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.")
            return LOGIN

        elif auth_response.status_code == 404:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫ —Å –ª–æ–≥–∏–Ω–æ–º: <b>{username}</b>",
                                            parse_mode="HTML")
            return ConversationHandler.END

        else:
            logger.info(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°—Ç–∞—Ç—É—Å {auth_response.status_code}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")
        return ConversationHandler.END

def has_helper_role(roles_response: Response) -> bool:
    try:
        body = roles_response.text
        data = json.loads(body)
        role_names = [item['roleName'] for item in data]
        return "helper" in role_names
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {roles_response.text}\n{e}")
        return False

def update_waiting_count(new_count):
    global waiting_count
    waiting_count = new_count

def handle_stomp_message(destination: str, body):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (destination: {destination}): {body}")
    try:
        data = json.loads(body.rstrip('\x00'))

        if destination.startswith("/queue"):
            receiver = data.get("receiver")

            if destination.startswith("/queue/errors"):
                error = data.get("error")
                message = f"‚ùå –û—à–∏–±–∫–∞: {error}"
            elif destination.startswith("/queue/dialogs"):
                request_count = data.get("size", 0)
                update_waiting_count(request_count)
                message = f"‚ñ∂Ô∏è –ß–∏—Å–ª–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{request_count}</b>"
            elif destination.startswith("/queue/private"):
                sender_username = data.get("sender")
                sender_message = data.get("message")
                message = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{sender_username}</b>:\n<i>{sender_message}</i>"
            elif destination.startswith("/queue/dialog.end"):
                if not is_dialog_open:
                    raise Exception("–î–∏–∞–ª–æ–≥ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç")
                initiator = data.get("initiator")
                message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{initiator}</b> –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥"
                ws_manager.unsubscribe(PRIVATE_CHAT_SUB_ID)
            else:
                raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {destination}")

            message_send(receiver, message)

        if destination.startswith("/topic"):
            if destination == "/topic/dialogs":
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–∏–∫–∞ - –∑–Ω–∞—á–∏—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –Ω–µ –º—ã, —Ç.–µ. —á–∏—Å–ª–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
                request_count = data.get("size", 0)
                update_waiting_count(request_count)
                message_all(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{request_count}</b>")

    except json.JSONDecodeError:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {body}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ STOMP —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def initialize_ws_manager(username, token):
    return wsmanager.WebSocketManager(
        subscribe_topics={
            ERROR_QUEUE_SUB_ID: "/user/queue/errors",
            DIALOGS_TOPIC_SUB_ID: "/topic/dialogs",
            DIALOGS_QUEUE_SUB_ID: "/user/queue/dialogs"
        },
        send_apis_on_connect=["/app/waiting.size"],
        message_handler=handle_stomp_message,
        ws_url=f"{WEBSOCKET_URL}?token={token}&username={username}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    global ws_manager, waiting_count, is_dialog_open

    try:
        if text == "–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            if ws_manager is None:
                raise ConnectionError("Websocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            ws_manager.send("/app/waiting.size", "")

        elif text == "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            if ws_manager is None:
                raise ConnectionError("Websocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

            if int(waiting_count) > 0:
                ws_manager.unsubscribe(DIALOGS_TOPIC_SUB_ID)
                ws_manager.subscribe(PRIVATE_CHAT_SUB_ID, "/user/queue/private")
                ws_manager.subscribe(DIALOG_END_QUEUE_SUB_ID, "/user/queue/dialog.end")
                is_dialog_open = True
                await update.message.reply_text(
                    "‚ÑπÔ∏è –í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                    reply_markup=ReplyKeyboardMarkup([["–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]], resize_keyboard=True))
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            if ws_manager is None:
                raise ConnectionError("Websocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            ws_manager.unsubscribe(PRIVATE_CHAT_SUB_ID)
            ws_manager.unsubscribe(DIALOG_END_QUEUE_SUB_ID)
            ws_manager.subscribe(DIALOGS_TOPIC_SUB_ID, "/topic/dialogs")
            is_dialog_open = False
            
            await update.message.reply_text(
                "‚ÑπÔ∏è –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=ReplyKeyboardMarkup(AFTER_AUTH_KEYBOARD, resize_keyboard=True))

            ws_manager.send("/app/waiting.size", "")

        elif text == "–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã":
            if ws_manager is None:
                raise ConnectionError("Websocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            ws_manager.disconnect()
            user_id = update.effective_user.id
            del users_usernames[user_id]
            await update.message.reply_text(
                "üîì –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))

        elif is_dialog_open:
            ws_manager.send("/app/chat", text)

    except ConnectionError as e:
        logger.error(e)
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
            reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        # await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global application
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ$"), authorize)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
        },
        fallbacks=[],
    ))
    application.add_handler(MessageHandler(
        None,
        # filters.Regex("^(–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è|–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥|–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã)$"),
        callback=handle_buttons
    ))
    application.run_polling()

if __name__ == "__main__":
    main()